#!/bin/bash

if [ -z "$1" ]
  then echo "Please provide the name of the game, e.g.  ./run_cpu breakout "; exit 0
fi
ENV=$1
FRAMEWORK="neswrap"

game_path=$PWD"/roms/"
env_params="useRGB=true"
agent="NeuralQLearner"
n_replay=1 # Number of experiences to replay per learning step.
netfile="\"convnet_atari3\""
update_freq=10 # How often do we update the Q function? Changed from 4 for Atari... 
actrep=10 # Changed from 4 for Atari...
discount=0.99 # Discount rate given to future rewards.
seed=1
learn_start=600 # Only start learning after this many steps. Should be bigger than bufferSize. Was set to 50k for Atari.
pool_frms_type="\"max\""
pool_frms_size=1 # Changed from 2 for Atari, since we don't have same limitations for NES.
initial_priority="false"
replay_memory=10000 # Set small to speed up debugging. 10M is the Atari setting... Big memory object!
eps_end=0.1
eps_endt=replay_memory
lr=0.00025
agent_type="DQN3_0_1"
preproc_net="\"net_downsample_2x_full_y\""
agent_name=$agent_type"_"$1"_FULL_Y"
state_dim=7056 # 84 x 84 resolution.
ncols=1 # Represents just the Y (ie - grayscale) channel.
agent_params="lr="$lr",ep=1,ep_end="$eps_end",ep_endt="$eps_endt",discount="$discount",hist_len=4,learn_start="$learn_start",replay_memory="$replay_memory",update_freq="$update_freq",n_replay="$n_replay",network="$netfile",preproc="$preproc_net",state_dim="$state_dim",minibatch_size=32,ncols="$ncols",bufferSize=512,valid_size=500,target_q=10000,clip_delta=1" # Deleted r_rescale, max_reward and min_reward for the SMB case.
steps=50000000 # Total steps to run the model.
eval_freq=5000 # Evaluate the model every eval_freq steps by calculating the score per episode for a few games. 250k for Atari.
eval_steps=2000 # How long is an evaluation? 125k for Atari.
prog_freq=2000 # How often do you want a report on the weights and gradients.
save_freq=5000 # Save every save_freq steps. Save early and often! 125k for Atari.
gpu=-1
random_starts=0 # How many NOOPs to perform at the start of a game (random number up to this value). Shouldn't matter for SMB?
pool_frms="type="$pool_frms_type",size="$pool_frms_size
num_threads=4
verbose=3 # 2 is default. 3 turns on debugging messages about what the model is doing.

args="-framework $FRAMEWORK -game_path $game_path -name $agent_name -env $ENV -env_params $env_params -agent $agent -agent_params $agent_params -steps $steps -eval_freq $eval_freq -eval_steps $eval_steps -prog_freq $prog_freq -save_freq $save_freq -actrep $actrep -gpu $gpu -random_starts $random_starts -pool_frms $pool_frms -seed $seed -threads $num_threads -verbose $verbose"
echo $args

cd dqn
../torch/bin/qlua train_agent.lua $args
